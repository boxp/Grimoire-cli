<?xml version="1.0" encoding="UTF-8"?>

<?language Clojure?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.image.*?>
<?import javafx.scene.input.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.text.*?>

<BorderPane id="BorderPane" fx:id="root" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="600.0" prefWidth="1200.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/2.2">
  <bottom>
    <HBox fx:id="futter" alignment="TOP_LEFT" prefHeight="30.0" prefWidth="600.0" spacing="10.0">
      <children>
        <ImageView fx:id="profileimg" fitHeight="20.0" fitWidth="20.0" pickOnBounds="true" preserveRatio="true" smooth="false" />
        <TextField fx:id="form" prefWidth="200.0" promptText="How are you doing?" HBox.hgrow="ALWAYS">
          <HBox.margin>
            <Insets fx:id="x1" />
          </HBox.margin>
        </TextField>
        <Button id="button" fx:id="pbtn" mnemonicParsing="false" text="Post" HBox.hgrow="NEVER" HBox.margin="$x1" />
      </children>
      <BorderPane.margin>
        <Insets left="10.0" right="10.0" />
      </BorderPane.margin>
    </HBox>
  </bottom>
  <center>
    <HBox fx:id="pane" prefHeight="100.0" prefWidth="200.0">
      <children>
        <VBox fx:id="maintl" prefHeight="200.0" prefWidth="100.0" HBox.hgrow="ALWAYS">
          <children>
            <HBox id="node" prefHeight="20.0" prefWidth="100.0">
              <children>
                <ImageView fx:id="home" fitHeight="20.0" fitWidth="20.0" pickOnBounds="true" preserveRatio="false">
                  <HBox.margin>
                    <Insets right="5.0" />
                  </HBox.margin>
                </ImageView>
                <Label id="label" prefHeight="20.0" prefWidth="150.0" text="HomeTimeLine">
                  <font>
                    <Font size="20.0" />
                  </font>
                </Label>
              </children>
            </HBox>
            <ListView fx:id="tllv" blendMode="SRC_ATOP" cache="true" cacheHint="DEFAULT" depthTest="INHERIT" disable="false" focusTraversable="true" mouseTransparent="false" prefHeight="200.0" prefWidth="200.0" VBox.vgrow="ALWAYS">
              <contextMenu>
                <ContextMenu fx:id="conm">
                  <items>
                    <MenuItem mnemonicParsing="false" text="Reply" fx:id="repmenu" />
                    <MenuItem mnemonicParsing="false" text="Favorite" fx:id="favmenu" />
                    <MenuItem mnemonicParsing="false" text="Retweet" fx:id="retmenu" />
                    <MenuItem mnemonicParsing="false" text="Favrite&amp;Retweet" fx:id="favretmenu" />
                  </items>
                </ContextMenu>
              </contextMenu>
            </ListView>
          </children>
        </VBox>
      </children>
      <padding>
        <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
      </padding>
    </HBox>
  </center>
  <padding>
    <Insets fx:id="x2" />
  </padding>
  <top>
    <MenuBar>
      <menus>
        <Menu mnemonicParsing="false" text="File">
          <items>
            <MenuItem mnemonicParsing="false" text="Exit  (Ctrl-Q)" fx:id="exit" />
          </items>
        </Menu>
        <Menu mnemonicParsing="false" text="Edit">
          <items>
            <MenuItem mnemonicParsing="false" text="Evalation form  (Ctrl-E)" fx:id="eform" />
          </items>
        </Menu>
        <Menu mnemonicParsing="false" text="Help">
          <items>
            <MenuItem mnemonicParsing="false" text="About Grimoire" />
          </items>
        </Menu>
      </menus>
    </MenuBar>
  </top>
  <fx:script><![CDATA[
    (use '[grimoire.commands]
         '[grimoire.oauth]
         '[grimoire.data]
         '[grimoire.services]
         '[grimoire.gui]
         '[grimoire.plugin]
         '[clojure.java.browse]
         '[clojure.string :only [split]])
    (import '(javafx.scene.input Clipboard ClipboardContent)
            '(javafx.application Application Platform)
            '(javafx.scene Node Scene)
            '(javafx.scene.web WebView)
            '(javafx.scene.input KeyCode)
            '(javafx.scene.text Text Font FontWeight)
            '(javafx.scene.control Label TextField PasswordField Button Hyperlink ListView MenuItem ListCell ListView)
            '(javafx.util Callback)
            '(javafx.scene.layout GridPane HBox VBox Priority)
            '(javafx.scene.paint Color)
            '(javafx.scene.image Image ImageView)
            '(javafx.geometry Pos Insets)
            '(javafx.event EventHandler)
            '(javafx.stage Stage Modality)
            '(javafx.scene.web WebView)
            '(javafx.collections FXCollections ObservableList))   
    (let [;cf (reify Callback 
          ;     (call [this _]
          ;       (proxy [ListCell] []
          ;         (updateItem [status emp?]
          ;           (proxy-super updateItem status emp?)
          ;           (future
          ;             (add-runlater
          ;               (if (not emp?)
          ;                 (.setGraphic this
          ;                   (gen-node! status)))))))))
          spell (doto (Button. "Î»") ; Evalation button
                    (.setId "button")
                    (.setOnAction (proxy [EventHandler] []
                                    (handle [_]
                                      (do
                                        (.. futter getChildren (remove 2 3))
                                        (.. futter getChildren (add pbtn))
                                        (binding [*ns* (find-ns 'grimoire.gui)]
                                          (print-node! (try 
                                                          (load-string (.getText form))
                                                          (catch Exception e e)))))))))]
      (do
        (.setOnAction repmenu
          (proxy [EventHandler] []
            (handle [_]
              (reply-form! (.indexOf @tweets (focused-status))))))
        (.setOnAction favretmenu
          (proxy [EventHandler] []
            (handle [_]
              (if @nervous
                (bool-dialog 
                  (str "Are you sure want to Favorite & Retweet?\n"
                       (. (focused-status) getText))
                       "Sure"
                       #(favret)
                       "Cancel")
                (favret)))))
        (.setOnAction favmenu
          (proxy [EventHandler] []
            (handle [_]
              (if @nervous
                (bool-dialog 
                  (str "Are you sure want to Favorite?\n"
                       (. (focused-status) getText))
                       "Sure"
                       #(fav)
                       "Cancel"))
              (fav))))
        (.setOnAction retmenu
          (proxy [EventHandler] []
            (handle [_]
              (if @nervous
                (bool-dialog 
                  (str "Are you sure want to Favorite?\n"
                       (. (focused-status) getText))
                       "Sure"
                       #(ret)
                       "Cancel")
                (ret)))))
        (.setOnAction exit 
          (proxy [EventHandler] []
            (handle [_]
              (System/exit 0))))
        (doto pbtn
          (.setGraphic 
            (ImageView. 
              (Image. "bird_black_16_0.png" (double 14) (double 11) true true)))
          (.setOnAction 
            (proxy [EventHandler] []
              (handle [_]
                (do
                  (post (.getText form))
                  (.clear form))))))
        (.setImage home (Image. "home.png"))
        (dosync
          (alter key-maps merge 
            {["8" false true]
             (fn [_]
               (add-runlater
                 (do 
                   (.requestFocus form)
                   (.. futter getChildren (remove 2 3))
                   (.. futter getChildren (add spell)))))
             ["9" false true]
             (fn [_]
               (add-runlater
                 (do 
                   (.requestFocus form)
                   (.. futter getChildren (remove 2 3))
                   (.. futter getChildren (add spell)))))
             ["J" false false]
             #(add-runlater
                (do 
                  (.. % (scrollTo (inc (.. % getFocusModel getFocusedIndex))))
                  (.. % getFocusModel (focus (inc (.. % getFocusModel getFocusedIndex))))))
             ["K" false false]
             #(add-runlater
               (do 
                 (.. % (scrollTo (dec (.. % getFocusModel getFocusedIndex))))
                 (.. % getFocusModel (focus (dec (.. % getFocusModel getFocusedIndex))))))
             ["F" true false]
             #(add-runlater
               (do
                 (.. % (scrollTo (+ 6 (.. % getFocusModel getFocusedIndex))))
                 (.. % getFocusModel (focus (+ 6 (.. % getFocusModel getFocusedIndex))))))
             ["U" true false]
             #(add-runlater
               (do
                 (.. % (scrollTo (- (.. % getFocusModel getFocusedIndex) 6)))
                 (.. % getFocusModel (focus (- (.. % getFocusModel getFocusedIndex) 6)))))
             ["G" false true]
             #(add-runlater
               (do
                 (.. % getFocusModel (focus (dec (.size nodes))))
                 (.. % (scrollTo (dec (.size nodes))))))
             ["G" false false]
             #(add-runlater
               (do 
                 (.. % getFocusModel (focus 0))
                 (.. % (scrollTo 0))))
             ["E" true false]
             (fn [_] (input-form))
             ["F" true true]
             (fn [_] (fav))
             ["R" true true]
             (fn [_] (ret))
             ["Q" true false]
             (fn [_] (System/exit 0))
             ["F11" false false]
             (fn [_] (.setFullScreen @main-stage true))}))
        (.setOnKeyPressed maintl
          (proxy [EventHandler] []
            (handle [ke]
              (add-runlater
                (try
                  ((@key-maps [(.. ke getCode getName) (.isControlDown ke) (.isShiftDown ke)]) tllv)
                  (catch Exception e (println (.getMessage e))))))))
        (try
          (.setOnContextMenuRequested tllv
                  (proxy [EventHandler] [] 
                    (handle [e] 
                      (let [users (cons (. (focused-status) getUser) (vec (. (focused-status) getUserMentionEntities)))
                            useritms (map 
                                      #(doto (MenuItem. (str "@" (. % getScreenName)))
                                        (.setOnAction
                                          (proxy [EventHandler] []
                                            (handle [_]
                                              (show-profile! %)))))
                                      users)
                            urls (filter #(= (seq "http") (take 4 %)) (split (.. (focused-status tllv) getText) #"\s|\n|ï¿½ï¿½"))
                            urlitms (map 
                                      #(doto (MenuItem. %)
                                        (.setOnAction
                                          (proxy [EventHandler] []
                                            (handle [_]
                                              (gen-webview %)))))
                                  urls)
                            plgs (map 
                                   #(if (. % get-name)
                                     (doto (MenuItem. (. % get-name))
                                       (.setOnAction
                                         (proxy [EventHandler] []
                                           (handle [e]
                                             (.on-click % e))))))
                                   @plugins)]
                        (add-runlater
                          (do
                            (try
                              (.. conm getItems (remove 4 (.. conm getItems size)))
                              (catch Exception e nil))
                            (try
                              (doall
                                (map #(.. conm getItems (add %)) 
                                  (concat useritms urlitms plgs)))
                              (catch Exception e nil))))))))
          (catch Exception e (println (.getMessage e))))
        (.setOnAction eform 
          (proxy [EventHandler] []
            (handle [_]
              (input-form))))
        (.setItems tllv nodes)))
        ;(.setCellFactory tllv cf)))
  ]]></fx:script>
</BorderPane>
